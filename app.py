#!/usr/bin/env python3
# thoth-cve-update
# Copyright(C) 2018, 2019, 2020 Fridolin Pokorny
#
# This program is free software: you can redistribute it and / or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Update Thoth's database of CVEs."""

import logging

import requests

from thoth.common import init_logging
from thoth.solver.python import get_ecosystem_solver
from thoth.python.exceptions import NotFound
from thoth.storages import GraphDatabase

__version__ = "0.2.0"

init_logging()

_LOGGER = logging.getLogger("thoth.cve_update")
_SAFETY_DB_URL = (
    "https://raw.githubusercontent.com/pyupio/safety-db/master/data/insecure_full.json"
)


def _list_cves() -> dict:
    """Download pyup safety db and parse it."""
    _LOGGER.debug("Downloading pyup CVE database")
    response = requests.get(_SAFETY_DB_URL)
    response.raise_for_status()
    return response.json()


def update_cve_info() -> None:
    """Gather CVEs from pyup and assign them in the graph database to packages."""
    graph = GraphDatabase()
    graph.connect()
    pypi_solver = get_ecosystem_solver("pypi")

    for package_name, cves in _list_cves().items():
        package_name = graph.normalize_python_package_name(package_name)

        _LOGGER.debug("Iterating over CVEs for package %r", package_name)
        for cve in cves:
            try:
                package = package_name + cve["v"]
                solved = pypi_solver.solve([package])
            except NotFound as exc:
                _LOGGER.warning(
                    "Skipping not found package %s: %s", package_name, str(exc)
                )
                continue
            except Exception as exc:
                _LOGGER.error(
                    "Skipping exception that occurred while resolving %r: %s",
                    package_name,
                    str(exc),
                )
                continue

            _LOGGER.debug(
                "Affected versions for %r using version range %r for CVE %s: %s",
                package_name,
                cve["v"],
                cve["id"],
                str(solved),
            )

            for package_name, package_versions in solved.items():
                # Discard index information for now.
                for package_version, _ in package_versions:
                    _LOGGER.debug(
                        "Assigning database CVE %s to package %r in version %r",
                        cve["id"],
                        package_name,
                        package_version,
                    )
                    existed = graph.create_python_cve_record(
                        package_name,
                        package_version,
                        "https://pypi.org/simple",
                        cve=cve["cve"],
                        record_id=cve["id"],
                        version_range=cve["v"],
                        advisory=cve["advisory"],
                    )

                    if not existed:
                        _LOGGER.info(
                            "Created new CVE entry for package %r in version %r (pyup id: %s)",
                            package_name,
                            package_version,
                            cve["id"],
                        )
                    else:
                        _LOGGER.info(
                            "CVE entry for package %r in version %r (pyup id: %s) already present",
                            package_name,
                            package_version,
                            cve["id"],
                        )


if __name__ == "__main__":
    update_cve_info()
